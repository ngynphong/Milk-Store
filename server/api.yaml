openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:3001
tags:
  - name: product
    description: Operations about product
  - name: company
    description: Operations about company
  - name: user
    description: Operations about user
  - name: brand
    description: Operations about brand
  - name: country
    description: Operations about country
  - name: category
    description: Operations about category
  - name: ageRange
    description: Operations about ageRange
  - name: payment
    description: Operations about payment
  - name: productItem
    description: Operations about productItem
paths:
  /product:
    post:
      tags:
        - product
      summary: Add a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Product created successfully
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Invalid input data
    get:
      tags:
        - product
      summary: Get all products
      responses:
        "200":
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"

  /product/{ProductID}:
    get:
      tags:
        - product
      summary: Get product by ID
      parameters:
        - name: ProductID
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Product details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Product not found
    put:
      tags:
        - product
      summary: Update an existing product
      parameters:
        - name: ProductID
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Product updated successfully
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Invalid input data
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Product not found
    delete:
      tags:
        - product
      summary: Delete a product
      parameters:
        - name: ProductID
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Product deleted successfully
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Product not found

  /auth/login:
    post:
      tags:
        - user
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        "200":
          description: Login successful
        "401":
          description: Unauthorized

  /auth/register:
    post:
      tags:
        - user
      summary: User registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Register"
      responses:
        "201":
          description: User registered
        "400":
          description: Bad request

  /auth/{UserId}:
    get:
      tags:
        - user
      summary: Get user details
      parameters:
        - name: UserId
          in: path
          required: true
          schema:
            type: integer
          example: 5
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found

    put:
      tags:
        - user
      summary: Update user details
      parameters:
        - name: UserId
          in: path
          required: true
          schema:
            type: integer
          example: 5
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User updated
        "404":
          description: User not found
        "400":
          description: Bad request

    delete:
      tags:
        - user
      summary: Delete user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          example: 5
      responses:
        "200":
          description: User deleted
        "404":
          description: User not found
  /brand:
    get:
      tags:
        - brand
      summary: Get all brand
      responses:
        "200":
          description: A list of brand
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Brand"
    post:
      tags:
        - brand
      summary: Create a new brand
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Brand"
      responses:
        "201":
          description: Brand created
        "400":
          description: Bad request

  /brand/{BrandID}:
    get:
      tags:
        - brand
      summary: Get brand details
      parameters:
        - name: brandId
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        "200":
          description: Brand details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Brand"
        "404":
          description: Brand not found

    put:
      tags:
        - brand
      summary: Update brand details
      parameters:
        - name: brandId
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Brand"
      responses:
        "200":
          description: Brand updated
        "404":
          description: Brand not found
        "400":
          description: Bad request

    delete:
      tags:
        - brand
      summary: Delete brand
      parameters:
        - name: brandId
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        "200":
          description: Brand deleted
        "404":
          description: Brand not found
  /role:
    get:
      tags:
        - role
      summary: Get all role
      responses:
        "200":
          description: A list of role
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"

    post:
      tags:
        - role
      summary: Create a new role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
      responses:
        "201":
          description: Role created
        "400":
          description: Bad request

  /role/{RoleID}:
    get:
      tags:
        - role
      summary: Get role details
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        "200":
          description: Role details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        "404":
          description: Role not found

    put:
      tags:
        - role
      summary: Update role details
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
      responses:
        "200":
          description: Role updated
        "404":
          description: Role not found
        "400":
          description: Bad request

    delete:
      tags:
        - role
      summary: Delete role
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        "200":
          description: Role deleted
        "404":
          description: Role not found

  /company:
    get:
      tags:
        - company
      summary: Get all companies
      responses:
        "200":
          description: List of companies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Company"

    post:
      tags:
        - company
      summary: Create a new company
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Company"
      responses:
        "201":
          description: Company created
        "400":
          description: Bad request

  /company/{CompanyID}:
    get:
      tags:
        - company
      summary: Get company details by ID
      parameters:
        - name: CompanyID
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        "200":
          description: Company details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"
        "404":
          description: Company not found

    put:
      tags:
        - company
      summary: Update company details
      parameters:
        - name: CompanyID
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Company"
      responses:
        "200":
          description: Company updated
        "404":
          description: Company not found
        "400":
          description: Bad request

    delete:
      tags:
        - company
      summary: Delete company
      parameters:
        - name: CompanyID
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        "200":
          description: Company deleted
        "404":
          description: Company not found
  /country:
    get:
      tags:
        - country
      summary: Get all countries
      responses:
        "200":
          description: List of countries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Country"

    post:
      tags:
        - country
      summary: Create a new country
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Country"
      responses:
        "201":
          description: Country created
        "400":
          description: Bad request

  /country/{CountryID}:
    get:
      tags:
        - country
      summary: Get country details by ID
      parameters:
        - name: CountryId
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        "200":
          description: Country details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Country"
        "404":
          description: Country not found

    put:
      tags:
        - country
      summary: Update country details
      parameters:
        - name: CountryId
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Country"
      responses:
        "200":
          description: Country updated
        "404":
          description: Country not found
        "400":
          description: Bad request

    delete:
      tags:
        - country
      summary: Delete country
      parameters:
        - name: CountryId
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        "200":
          description: Country deleted
        "404":
          description: Country not found
  /category:
    get:
      tags:
        - category
      summary: Retrieve a list of categories
      responses:
        "200":
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
    post:
      tags:
        - category
      summary: Create a new category
      requestBody:
        description: Category object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "201":
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          description: Invalid input

  /category/{CategoryID}:
    get:
      tags:
        - category
      summary: Retrieve a category by ID
      parameters:
        - name: CategoryID
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: A category object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "404":
          description: Category not found
    put:
      tags:
        - category
      summary: Update an existing category
      parameters:
        - name: CategoryID
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated category object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "200":
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          description: Invalid input
        "404":
          description: Category not found
    delete:
      tags:
        - category
      summary: Delete a category by ID
      parameters:
        - name: CategoryID
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Category deleted successfully
        "404":
          description: Category not found
  /ageRange:
    get:
      tags:
        - ageRange
      summary: Retrieve all age ranges
      responses:
        "200":
          description: A list of age ranges
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AgeRange"
    post:
      tags:
        - ageRange
      summary: Create a new age range
      requestBody:
        description: Age range object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AgeRange"
      responses:
        "201":
          description: Age range created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgeRange"
        "400":
          description: Invalid input

  /ageRange/{ageRangeID}:
    get:
      tags:
        - ageRange
      summary: Retrieve an age range by ID
      parameters:
        - name: ageRangeID
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: An age range object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgeRange"
        "404":
          description: Age range not found
    put:
      tags:
        - ageRange
      summary: Update an existing age range
      parameters:
        - name: ageRangeID
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated age range object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AgeRange"
      responses:
        "200":
          description: Age range updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgeRange"
        "400":
          description: Invalid input
        "404":
          description: Age range not found
    delete:
      tags:
        - ageRange
      summary: Delete an age range by ID
      parameters:
        - name: ageRangeID
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Age range deleted successfully
        "404":
          description: Age range not found
  /order:
    get:
      tags:
        - oder
      summary: Retrieve all orders
      responses:
        "200":
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
    post:
      summary: Create a new order
      requestBody:
        description: Order object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
              example:
                orderID: 1
                cartID: 2
                orderDate: "2024-06-13T15:30:00Z"
      responses:
        "201":
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid input

  /order/{OrderID}:
    get:
      tags:
        - oder
      summary: Retrieve an order by ID
      parameters:
        - name: OrderID
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: An order object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
                example:
                  orderID: 1
                  cartID: 2
                  orderDate: "2024-06-13T15:30:00Z"
        "404":
          description: Order not found
    put:
      tags:
        - oder
      summary: Update an existing order
      parameters:
        - name: OrderID
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated order object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
              example:
                orderID: 1
                cartID: 2
                orderDate: "2024-06-13T15:30:00Z"
      responses:
        "200":
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid input
        "404":
          description: Order not found
    delete:
      tags:
        - oder
      summary: Delete an order by ID
      parameters:
        - name: OrderID
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Order deleted successfully
        "404":
          description: Order not found
  /payment:
    get:
      tags:
        - payment
      summary: Retrieve all payments
      responses:
        "200":
          description: A list of payments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Payment"
    post:
      tags:
        - payment
      summary: Create a new payment
      requestBody:
        description: Payment object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Payment"
              example:
                userID: 1
                Date: "2024-06-02"
                Point: 400
      responses:
        "201":
          description: Payment created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
        "400":
          description: Invalid input

  /payment/{PaymentID}:
    get:
      tags:
        - payment
      summary: Retrieve a payment by ID
      parameters:
        - name: PaymentID
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: A payment object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
                example:
                  userID: 1
                  Date: "2024-06-02"
                  Point: 400
        "404":
          description: Payment not found
    put:
      tags:
        - payment
      summary: Update an existing payment
      parameters:
        - name: PaymentID
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated payment object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Payment"
              example:
                userID: 1
                Date: "2024-06-02"
                Point: 450
      responses:
        "200":
          description: Payment updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
        "400":
          description: Invalid input
        "404":
          description: Payment not found
    delete:
      tags:
        - payment
      summary: Delete a payment by ID
      parameters:
        - name: PaymentID
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Payment deleted successfully
        "404":
          description: Payment not found
  /productItem:
    get:
      tags:
        - productItem
      summary: Retrieve all product items
      responses:
        "200":
          description: A list of product items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductItem"
    post:
      tags:
        - productItem
      summary: Create a new product item
      requestBody:
        description: Product item object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductItem"
              example:
                ProductID: 1
                ProductName: "MilkMagic Baby Milk 1"
                Price: 500
                ImgProduct: "https://th.bing.com/th/id/OIP.B-xKUW-KDN-ED1UjBvjQ-AHaHa?w=800&h=800&rs=1&pid=ImgDetMain"
                Description: "High quality milk for babies"
      responses:
        "201":
          description: Product item created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductItem"
        "400":
          description: Invalid input

  /productItem/{ProductItemID}:
    get:
      tags:
        - productItem
      summary: Retrieve a product item by ID
      parameters:
        - name: ProductItemID
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: A product item object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductItem"
                example:
                  ProductID: 1
                  ProductName: "MilkMagic Baby Milk 1"
                  Price: 500
                  ImgProduct: "https://th.bing.com/th/id/OIP.B-xKUW-KDN-ED1UjBvjQ-AHaHa?w=800&h=800&rs=1&pid=ImgDetMain"
                  Description: "High quality milk for babies"
        "404":
          description: Product item not found
    put:
      tags:
        - productItem
      summary: Update an existing product item
      parameters:
        - name: ProductItemID
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated product item object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductItem"
              example:
                ProductID: 1
                ProductName: "MilkMagic Baby Milk 1"
                Price: 550
                ImgProduct: "https://th.bing.com/th/id/OIP.B-xKUW-KDN-ED1UjBvjQ-AHaHa?w=800&h=800&rs=1&pid=ImgDetMain"
                Description: "High quality milk for babies (updated)"
      responses:
        "200":
          description: Product item updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductItem"
        "400":
          description: Invalid input
        "404":
          description: Product item not found
    delete:
      tags:
        - productItem
      summary: Delete a product item by ID
      parameters:
        - name: ProductItemID
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Product item deleted successfully
        "404":
          description: Product item not found

components:
  schemas:
    Product:
      type: object
      properties:
        CategoryID:
          type: integer
          example: 1
        BrandID:
          type: integer
          example: 1
        AgeRangeID:
          type: integer
          example: 1
        ProductName:
          type: string
          example: MilkMagic Baby Milk
        Price:
          type: number
          format: float
          example: 950.50
        ImgProduct:
          type: string
          format: uri
          example: https://cdn1.concung.com/2022/07/58388-91241-large_mobile/sua-de-kabrita-so-3-800g-tu-2-tuoi
    Login:
      type: object
      properties:
        email:
          type: string
          example: vuongcay@gmail.com
        password:
          type: string
          example: yourpassword

    Register:
      type: object
      properties:
        email:
          type: string
          example: vuongcay@gmail.com
        password:
          type: string
          example: yourpassword
        fullName:
          type: string
          example: Vuong
        age:
          type: integer
          example: 23
        address:
          type: string
          example: Quan 9
    User:
      type: object
      properties:
        UserID:
          type: integer
          example: 5
        RoleID:
          type: integer
          example: 2
        Email:
          type: string
          example: vuongcay@gmail.com
        FullName:
          type: string
          example: Vuong
        Age:
          type: integer
          example: 23
        Address:
          type: string
          example: Quan 9
    Brand:
      type: object
      properties:
        CompanyID:
          type: integer
          example: 1
        Name:
          type: string
          example: Pediasure
    Role:
      type: object
      properties:
        Title:
          type: string
          example: admin1
    Company:
      type: object
      properties:
        CompanyID:
          type: integer
          example: 1
        CountryID:
          type: integer
          example: 1
        Name:
          type: string
          example: Company Anh
    Country:
      type: object
      properties:
        Name:
          type: string
          example: Viet Nam
        Status:
          type: string
          example: Active
        Code:
          type: string
          example: V005
    Category:
      type: object
      properties:
        CategoryID:
          type: integer
        NameMilk:
          type: string
      required:
        - CategoryID
        - NameMilk
    AgeRange:
      type: object
      properties:
        AgeRangeID:
          type: integer
        Age:
          type: string
      required:
        - AgeRangeID
        - Age
    Order:
      type: object
      properties:
        orderID:
          type: integer
          example: 1
        cartID:
          type: integer
          example: 2
        orderDate:
          type: string
          format: date-time
          example: "2024-06-13T15:30:00Z"
      required:
        - orderID
        - cartID
        - orderDate
    Payment:
      type: object
      properties:
        userID:
          type: integer
          example: 1
        Date:
          type: string
          format: date
          example: "2024-06-02"
        Point:
          type: integer
          example: 400
      required:
        - userID
        - Date
        - Point

    ProductItem:
      type: object
      properties:
        ProductID:
          type: integer
          example: 1
        ProductName:
          type: string
          example: "MilkMagic Baby Milk 1"
        Price:
          type: number
          format: float
          example: 500
        ImgProduct:
          type: string
          format: uri
          example: "https://th.bing.com/th/id/OIP.B-xKUW-KDN-ED1UjBvjQ-AHaHa?w=800&h=800&rs=1&pid=ImgDetMain"
        Description:
          type: string
          example: "High quality milk for babies"
      required:
        - ProductID
        - ProductName
        - Price
        - ImgProduct
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
